Title: Xample Overview

This is the manual for the Xample app.

Section: Intro

Here is a summary of important stuff Xample uses.

It is highly recommended that you are familiar with the following javascript concepts.

o Promises
o Callbacks
o The DOM (Document Object Model)
o Requiring Packages & The Objects You Get From Them
o Ajax Post & Get Requests
o Relative vs Absolute Urls & Paths, and Where The Server & Domain Are Located On The Computer

It's useful to know what the following is.

o Sql Injection

The following libraries are used and thus knowledge of them is also useful.

o highlight.js
o MathJax.js
o pdf.js

If you want to add to the project, you should learn the following.

o Git
o Natural Docs

Section: Environment Set Up

This section walks through setting up your computer for local testing.

If you are on Ubuntu, don't install Homebrew & replace "brew" with "apt-get".
If you are on Windows, go buy a different computer.

!! Important, only share these files between Git & Test folder:

o xample/page.js
o xample/xample.js
o public_html/css/*
o public_html/js/*

Set up a bash script that uses rsync to synchronize these files.
You can run the script inside atom using the "script" package.

Topic: Work Flow

Follow these steps for editing & testing code.

1 - Edit files in your local Git folder.
2 - When ready for testing, copy files from Git folder to Test folder.
3 - Run the software inside the Test folder for testing.
4 - When ready, push files to remote Git repo from local Git folder.

Topic: Install NVM

NVM is Node Version Manager. Keeps track of node installations.

> curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh | bash

Topic: Install Node

Node is the engine that runs the server javascript.

> nvm install node
> nvm use node

Topic: Install Homebrew

Homebrew is a package manager for installing OS dependencies.

> /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

Topic: Install NPM

NPM is Node Package Manager for installing Node dependencies.

> brew install npm

Topic: Install ESLint

ESLint is a linter that checks javascript syntax for errors and code consistency.

> npm install eslint -g

Topic: Install Gyp

Gyp is a depency requirement for the Atom terminal-plus plug-in.

> npm install node-gyp -g

Topic: Download Git Repo

Get the Xample code.

> git clone https://github.com/efossas/JS-Xample

Topic: Create Test Folder

Create a folder for testing. It will include dependencies no found in the repo.

> mkdir (<TEST-FOLDER>)
> cp (<GIT-FOLDER>)/public_html (<TEST-FOLDER>)/public_html
> cp (<GIT-FOLDER>)/xample (<TEST-FOLDER>)/xample

Topic: Install Atom From

Atom is the preferred IDE for this project.

https://atom.io/

Topic: Install Atom Plugins

These plug-ins for Atom help stream-line work flow.

> apm install linter-eslint
> apm install minimap
> apm install jumpy
> apm install file-icons
> apm install pigments
> apm install color-picker
> apm install atom-ternjs
> apm install atom-minify
> apm install regex-railroad-diagram
> apm install atom-terminal-panel
> apm install script
> apm install git-plus
> apm install merge-conflicts
> apm install git-time-machine
> apm install data-atom
> apm install remote-ftp
> apm install package-manager

> apm install custom-folds
- set open & close tags for custom-folds: <<<code>>> & <<<fold>>>

Topic: Install Xample Dependencies In Test Folder

These OS & Node dependencies are required for Xample to work.

> cd (<TEST-FOLDER>)/xample

> npm install

> brew install imagemagick

- Use "mysql-server", if you're on Ubuntu.
> brew install mysql

Install Libre Office 4.3.7.2 From:

https://downloadarchive.documentfoundation.org/libreoffice/old/

> brew install unoconv

Download Static Build FFMPEG From:

https://ffmpeg.org/download.html

- Unzip ffmpeg into "xample/" & rename ffmpeg folder to "ffmpeg"

Topic: Configure MySQL

MySQL is the database software. It requires configuring.

- the following two lines are needed hack for MAC OSX
> sudo mkdir /var/mysql
> sudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock

- Start MySQL, log in, & configure the databases.
> sudo brew services start mysql

> mysql -uroot
> source (<GIT-FOLDER>)/db/initialize.sql

Topic: Testing

Follow these steps to test Xample.

You can leave mysql running or stop it in between testing.
start mysql:
> sudo brew services start mysql
stop mysql:
> sudo brew services stop mysql

To test, make sure mysql is running.

> cd (<TEST-FOLDER>)/xample
> node xample.js local 2020

"2020" is the port number. If not included it defaults to 2020,
or you can specify a different one if needed.

Now go to your web browser and type: http://localhost:2020

Section: Tools

These are work flow tools used for communication.

Topic: Zenhub

Zenhub adds storyboards to the Github.

Topic: Slack

Slack is used for all communication due to its channels.

Topic: Draw.io

Draw.io is used for creating flow charts.

Section: Files

Xamples has these main files.

Topic: xample.js
the server

Topic: page.js
the back-end

Topic: navigation.js
the front-end

Section: NPM Packages

Xample uses the following native npm packages.

Topic: Query String
require('query-string'), https://github.com/sindresorhus/query-string

Topic: File System
require('fs')

Topic: Password Hash
require('password-hash'), https://github.com/davidwood/node-password-hash

Topic: MySQL
require('mysql'), https://github.com/felixge/node-mysql

Topic: Express
require('express'), https://github.com/expressjs/express

Topic: Express Sessions
require('express-session'), https://github.com/expressjs/session

Topic: Busboy
require('connect-busboy'), https://github.com/mscdex/connect-busboy

Topic: MySQLStore
require('express-mysql-session')(session), https://www.npmjs.com/package/express-mysql-session

Section: Libraries

Xample uses the following libraries

Topic: alertify.min.js
for custom html alert notifications

Topic: highlight.min.js
for code block rendering

Topic: MathJax.js
for asciiMath & Latex rendering

Topic: pdf.js
for converting pdfs into <canvas> objects

Section: Styles

Xample uses the following css styles.

Topic: block.css
for styling blocks & pages

Topic: vs.css
for code block rendering

Topic: alertify.core.css
core alertify styles

Topic: alertify.default.css
optional default styles

Section: Documentation

Xample documentation is compiled using NaturalDocs. It compiles the comments in the files into a web doc.

This front page is a stand-alone file called manual.txt that is included in the compilation. It can be found in the manual_docs/ folder.

Topic: Compiling The Manual

To compile the doc follow these steps.

Copy the entire Xample git folder (not testing folder!) into the NaturalDocs folder. Then run this command.

> ./NaturalDocs -i Xample/ -o HTML Xample/manual -p Xample/manual -s cust

The "-s cust" refers to the cust.css file that applies custom styling for the manual.

Section: Comments

Xample is commented in the following way.

Topic: NaturalDocs Comments
These comments are used to generate the documentation. They frequently use "Section" "Topic" "Function" "Parameters" & "Returns" keywords.

Topic: Asterisk Comments
Asterisk comments are used for completed code.

Topic: Triple Slash Comments
Triple slash comments are to marks code where there are design questions or something is incomplete.

Triple slashes can be easily searched for & won't be confused with double slashes which are commonly used for other things (urls,code folding,etc.).

Topic: Double Slash Comments
Do not use them.

Section: Linter

ESLint is used as the javascript linter for this project. Linting rules are stored in .eslintrc.json. If there are important reasons for keeping rules in that file, they should be listed here.

Topic: func-style
"Declarations" should be preferred since hoisting is used a lot. Arrow notation should not be allowed since uglifyjs cannot handle them.

Section: Error Codes

Xample uses these custom error codes.

Topic: Logged errors

These errors are logged in the analytics databse.

These errors are stored using a short int.
They can range from 0 - 255.

- 110 : convert media error
- 111 : remove media error
- 112 : delete media error
- 120-130 : file system error
- 150 : front-end error
- 199 : overload attack
- 200-220 : db query errors
- 221 : db connection error

Topic: Serious Errors

These errors are not logged & indicate a serious problem.

- 666 : uncaught exception

The uncaught exception is not sent to the database.
It indicates a serious failure and the app may have crashed.
The app attempts to send a slack message when this occurs & tries to log the error in errors/666.txt. If logging the error fails, it will display it in the terminal running the server.

- 667 : journal db error

These are errors that occur when the analytics.journal function cannot log to the analytics database. The error is written to errors/667.txt. If that fails, the error is displayed to the terminal running the server.

Section: Flow Charts

Xample follows these flow diagrams for executing use cases.

Topic: Xample Flow Chart

https://drive.google.com/open?id=0B1-za7ikYAAlM1VlZk9SUWt5TTg

Topic: Add Blocks Chart

https://drive.google.com/open?id=0B1-za7ikYAAlaFdLSVpWRlVXTE0

Topic: Delete Blocks Chart

https://drive.google.com/open?id=0B1-za7ikYAAlNjl1N0lkRmR5ejQ

Topic: Save Blocks Chart

https://drive.google.com/open?id=0B1-za7ikYAAlNXpDWjhhZTVPbXc

Section: Pages

The following are a list of pages loaded by the back-end.

All of these pages are loaded by sending a default html page which contains the necessary javascript & css links, header information, and the main <div class='content'> tag, along with a specified front-end javascript function that will actually populate the main tag with the page's unique content. For example, the Landing Page will include <script>displayLanding();<script> at the bottom. Other than these pages, all content is dynamically loaded and altered by front-end functions.

Topic: Error Page
displayError(), this is the 404 error page for unknown URLs

Topic: Landing Page
displayLanding(), this is the index page a user sees when not logged in

Topic: Home Page
displayHome(), this is the index page a user sees when they are logged in

Topic: Profile Page
profilePage(), this is the page that displays a user's profile info for editing.

Topic: Edit Page
editPage(), this is the page that displays the edit mode for a user's xample page

Topic: Choose Page
choosePage(), if user exits edit page without saving, they'll be presented with this page.
It will give them the option to either load the temporary or permanent saves of the edit page.

Topic: Show Page
showPage(), this is the page that displays the presentation mode for a user's xample page

Section: Page Layout

Xample's web pages are laid out in the following form.

Topic: Page Contents.

Xample pages are loaded with this content.

A page has a <head> tag with all of the needed links to libraries and styles & a <body> tag which holds two things. The first is a <div> with class "content" and the second is a <script> with a front-end javascript function to generate content for the content div.

Blocks are stored in the page in the following way. All of the blocks are stored in <div> with class "blocks". Inside of that are regular blocks which are <div> tags with a block id which is just a number. Inside of those are two things. First, a content block, which is a special tag with a block id that is the letter "a" and a number. Second, a buttons div, which is a <div> that holds all of the block buttons with an id that is the letter "b" and a number.

Topic: HTML

This is an example of the what the page HTML looks like.

> <head>
> </head>
>
> <body>
> <div class="blocks">
> <div class="block" id="1">
>
> <div class="btype" id="a1"> ...content... </div> <div class="blockbtns" id="b1"> ...buttons... </div>
>
> </div> // block
> </div> // blocks
>
> <script>loadFunction()</script>
> </body>

Section: Database

Xample uses a MySQL database. The following NodeJS package is used to handle communication with the database, https://github.com/felixge/node-mysql.

Topic: Querying The Database

When a page requires a query it uses a connection from a pool of connections set up on the back-end. To use a connection you call this.

> pool.getConnection(function(err, connection) {...});

Then, to use a connection you call this, where qry is the MySQL query.

> connection.query(qry, function(err, rows, fields) {...});

If successful, err will be false and rows will contain the query results. You can get specific rows of data as you would with an array.

> rows[0]

To grab a specfic column from that row, you use dot notation. In the following example, "column" would be the name of the column field you want.

> rows[0].column

If the query was not able to find the target of the WHERE clause, then typeof rows[0] will be undefined. You can check that for failed queries.

> if (typeof rows[0] === 'undefined') {...}

When you are done with the connection, release it back to the pool.

> connection.release();

Topic: Useful Commands

These are commonly used MySQL commands for creating & debugging.

> CREATE DATABASE database;
> USE database;
> CREATE TABLE table (column type, PRIMARY KEY (column) );
> SHOW TABLES;
> DESCRIBE table;
> RENAME TABLE old TO new;
> TRUNCATE TABLE table;
> ALTER TABLE table DROP COLUMN column;
> ALTER TABLE table ADD PRIMARY KEY (column);

> SELECT * FROM table LIMIT 10;
> SELECT COUNT(DISTINCT(column)) FROM table;
> DELETE FROM table WHERE column != 'value';

> LOAD DATA INFILE '/tmp/file.txt' INTO TABLE table COLUMNS TERMINATED BY '$' LINES TERMINATED BY '\n' IGNORE 1 LINES (column, @ignore);

> CREATE USER 'nodesql'@'localhost' IDENTIFIED BY '(<PASSWORD>)';
> GRANT ALL PRIVILEGES ON xample.* TO 'nodesql'@'localhost';

Section: Database Table - xample

This database stores user information, sessions, and user pages.

Topic: Users
This table holds general info for every user.

1. uid (primary key)
2. username
3. password
4. email
5. phone
6. autosave

> CREATE TABLE Users (uid INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL, password CHAR(60) NOT NULL, email VARCHAR(50), phone VARCHAR(15), autosave SMALLINT UNSIGNED NOT NULL );

Topic: p_uid
Each user has a table for storing info about their block pages. The table is named "p_" + uid.

1. pid (primary key)
2. pagename
3. status
4. subject
5. category
6. topic

> CREATE TABLE p_ (pid SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY, pagename VARCHAR(50), status BOOLEAN, subject VARCHAR(32), category VARCHAR(32), topic VARCHAR(32));

Topic: p_uid_pid & t_uid_pid
Each block page has a table for storing its block data. The table is named "p_" + uid + "_" + pid. Temporary page tables are used to store back ups in case a connection is lost. They use the prefix "t_".

1. bid (primary key)
2. mediatype
3. mediacontent

> CREATE TABLE p_ (bid TINYINT UNSIGNED, mediatype CHAR(5), mediacontent VARCHAR(4096) );

Topic: g_uid
Each user has a table for storing info about their learning guides. The table is named "g_" + uid.

1. gid (primary key)
2. guidename
3. status
4. subject
5. category
6. topic

> CREATE TABLE g_ (gid SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY, guidename VARCHAR(50), status BOOLEAN, subject VARCHAR(32), category VARCHAR(32), topic VARCHAR(32));

Topic: g_uid_gid & c_uid_gid
Each guide has a table for storing list data. The table is named "g_" + uid + "_" + gid. Temporary guide tables are used to store back ups in case a connection is lost. They use the prefix "c_" (conditional).

1. lid (primary key)
2. links

> CREATE TABLE g_ (lid TINYINT UNSIGNED, links VARCHAR(1024) );

Topic: sessions
This table stores persistent sessions.

1. session_id
2. expires
3. data

> CREATE TABLE sessions (session_id VARCHAR(255) NOT NULL PRIMARY KEY, expires DATETIME NOT NULL, data TEXT NOT NULL);

Section: Database Table - xanalytics

This database stores errors and event analytics.

Topic: xerror

This table stores logged errors.

1. id
2. scriptName
3. functionName
4. lineNumber
5. userID
6. eventTime
7. message

CREATE TABLE xerror (id TINYINT UNSIGNED, scriptName VARCHAR(32), functionName VARCHAR(32), lineNumber SMALLINT UNSIGNED, userID INT UNSIGNED, eventTime DATETIME, message VARCHAR(256) );

Topic: xdata

This table stores event analytics.

1. scriptName
2. functionName
3. lineNumber
4. userID
5. eventTime

CREATE TABLE xdata (scriptName VARCHAR(32), functionName VARCHAR(32), lineNumber SMALLINT UNSIGNED, userID INT UNSIGNED, eventTime DATETIME );

Section: Uploaded Media

Xample stores user uploaded media in a folder called "xm".

Topic: File System Organization

The media is stored with the following folder & file configuration.

Inside this folder, each user has their own folder which is named by their uid. Inside each user folder, each user page has their own folder named by their pid. Thus, the directory structure is like this.

> xample-media/ -> uid/ -> pid/

Media is saved in these folders with random eight character names. This is to help prevent people from web crawling the media. Uploading media requires the use of the package "connect-busboy".

Section: Post Data (Back-End)

Xample parses POST data on the back-end in the following way.

Topic: Query String Package

It uses the "query-string" package for extracting key value data.

To get data from an http request, you call this.

> request.on('data', function (data) {...});

To parse the post data, you run this.

> var postData = qs.parse(data);

Now you can access post data by their keys using dot notation. In the following example, "info" should be the key for the data you want.

> postData.info;

Section: Ajax Data (Front-End)

Xample parses data on the front-end in the following way.

Topic: CSV Data.

Data is always received as comma-separated strings which are parsed for their contents.

It is necessary to know the format of the strings to use the data properly. The formats are listed below.

*Sections in parentheses indicate that the data may be repeated.*

getpages - returns a list of user's pages

> (pid,pagename,)

editpage - returns a list of page data & block data. mediaType & mediaContent are synonymous with btype (block type) & blockContent.

> pid,pagename,(mediaType,mediaContent,)

saveblocks - receives a list of the blocks types and contents

> pid -> pid
> pagename -> page name
> mediaType -> (block type,)
> mediaContent -> (block content,)

Section: Blocks

Xample can create the following blocks. A *block* is just a div, however each block will contain a type of html tag inside the generic div to hold the content. They are called *content blocks*. An example is provided below where "textarea" is used to hold content. These content blocks are identified with an "a" followed by the block number.

> <div class="block" id="1"><textarea id="a1"></textarea></div>

Topic: xtext

This is the WYSIWIG (what you see is what you get) block. It is for creating rich text. To prevent clutter, applying styles to text is done through shortcuts (ctrl + shift + #), where # is a different key depending on the command. The shortcuts call the html5 javascript function execCommand() to apply style tags (such as <b> for bold). In order to use execCommand, the content block has to be an iframe.

Thus, the block goes like this, block div -> <iframe> content block -> detectkey() -> execCommand()

Currently, the following shortcuts are supported.

"b" - bold
"i" - italic
"l" - list
"+" - superscript
"-" - subscript
"j" - justify left
"f" - fully justify
"h" - hyperlink

Topic: xcode

This is the programming code block. It uses the <code> tag because that makes the browser display the text using a monospaced font. To avoid clutter, the code is color formatted when the user clicks anywhere outside of the block (onblur). The wrapper function renderCode() calls the function that applies formatting (a "highlight.js" library function) and also does some validation, like checking that the character limit hasn't been reached.

Thus, the block goes like this, block div -> <code> content block -> renderCode()

content block class - xCde

Topic: xmath

This is the ASCIIMath block. It takes ASCIIMath markup language and renders the input into MathML (which uses <math> tags, math fonts, and styling to make pretty equations). To prevent clutter, the input is not rendered until the user clicks anywhere outside of the block (onblur). The wrapper function renderMath() calls the function that applies rendering (a "MathJax.js" library function) and also does some validation. Input is entered in a contenteditable div and the MathML is inserted into a generic div with the "mathImage" class.

Thus, the block goes like this, block div -> <div contenteditable> content block -> renderMath() -> <div class-"mathImage"> content display

content block class - xMat

Topic: latex

This is the LaTeX block. It takes LaTeX markup language and renders the input into MathML (which uses <math> tags, math fonts, and styling to make pretty equations). To prevent clutter, the input is not rendered until the user clicks anywhere outside of the block (onblur). The wrapper function renderLatex() calls the function that applies rendering (a "MathJax.js" library function) and also does some validation. Input is entered in a contenteditable div and the MathML is inserted into a generic div with the "latexImage" class.

Thus, the block goes like this, block div -> <div contenteditable> content block -> renderLatex() -> <div class-"latexImage"> content display

Although this block isn't really necessary since there is an ASCIIMath block which uses a much easier markup language, it is still provided because LaTeX has been around for longer (which means more people know how to use it) and there is the potential that it is more powerful and could provide some styling that ASCIIMath does not.

content block class - xLtx

Topic: image

This is the image block. It accepts a user uploaded image which is converted on the back-end using imagemagick to a jpg, which is html5 compatible on all browsers. The jpg image is put into an <img> tag by setting its source "src" value.

Thus, the block goes like this, block div -> <img> content block -> uploadMedia()

content block class - xImg

Topic: audio

This is the audio block. It accepts a user uploaded audio file which is converted on the back-end using ffmpeg to a mp3, which is html5 compatible on all browsers. The mp3 is put into a <audio> tag. Audio tags have <source> tags inside them. The mp3 path is applied to that <source> tag.

Thus, the block goes like this, block div -> <audio> content block -> uploadMedia()

content block class - xAud

Topic: video

Thus is the video block. It accepts a user uploaded video file which is converted on the back-end using ffmpeg to an mp4, which is html5 compatible on all browsers. The mp4 is put into a <video> tag. Video tags have <source> tags inside them. The mp4 path is applied to that <source> tag.

Thus, the block goes like this, block div -> <video> content block -> uploadMedia()

content block class - xVid

Topic: slide

This is the slide block. It accepts a user uploaded presentation slide (like power point) which is converted to pdf on the back-end using unoconv (which is just a command line tool for LibreOffice). This block is easily the most complex due to the difficulty of working with pdfs. When a page is loaded, a pdf object is created for each pdf on the page. These pdf objects are stored in a global array on the front-end called "pdfObjects". These pdf objects can be rendered into a 2D image inside of a <canvas> tag using a "pdf.js" library function. The first page is always rendered first. When the user clicks on the right or left side of the block, renderPDF() is called, which is just a wrapper function. Clicking left makes the slide render the previous page, and clicking right makes the slide render the next page. To keep track of which page is currently rendered, the <canvas> tag uses a custom data attribute, specifically "data-page".

Thus, the block goes like this, block div -> <canvas> content block -> renderPDF()

content block class - xSli

Topic: title

This is the title block. It's very simple. It's just a text input that accepts a short line of text. It allows users to place titles over other blocks, like for putting a title over a video block.

Thus, the block goes like this, block div -> <input type="text"> content block

content block class - xTit

Section: Styles

Xample uses these CSS styles

Topic: Page & Blocks

...this needs completion.

Section: Minify

Topic: JS & CSS

Javascript & CSS files are minified before being uploaded. Use the atom-minify plug-in for minifying content before uploading javascript and css files to the production server.

Section: Persistent Media

We allow for these file extensions.

Topic: ImageMagick

We allow for these image file extensions.

- .bmp
- .bmp2
- .bmp3
- .jpeg
- .jpg
- .pdf
- .png
- .svg

However, ImageMagick supports all of the following extensions. You can view a full list with the following command.

> identify -list format

> DNG
> AAI*
> AI
> ART*
> ARW
> AVI
> AVS*
> BGR*
> BGRA*
> BGRO*
> BMP*
> BMP2*
> BMP3*
> BRF*
> CAL*
> CALS*
> CANVAS*
> CAPTION*
> CIN*
> CIP*
> CLIP*
> CMYK*
> CMYKA*
> CR2
> CRW
> CUR*
> CUT*
> DATA*
> DCM*
> DICOM
> DCR
> DCX*
> DDS*
> DFONT*
> DNG
> DOT
> DPX*
> DXT5*
> EPDF
> EPI
> EPS
> EPS2*
> EPS3*
> EPSF
> EPSI
> EPT
> EPT2
> EPT3
> ERF
> FAX*
> FAX
> FRACTAL*
> FTS*
> G3*
> GIF*
> GIF87*
> GRADIENT*
> GRAY*
> GROUP4*
> GV
> H*
> HALD*
> HDR*
> HISTOGRAM*
> HRZ*
> HTM*
> HTML*
> ICB*
> ICO*
> ICON*
> IIQ
> INFO
> INLINE*
> IPL*
> ISOBRL*
> ISOBRL6*
> JNG*
> See
> format
> JNX*
> JPE*
> JPEG*
> JPG*
> JPS*
> JSON
> K25
> KDC
> LABEL*
> M2V
> M4V
> MAC*
> MAGICK*
> MAP*
> MASK*
> MAT
> MATTE*
> MEF
> MIFF*
> MKV
> MNG*
> MONO*
> MOV
> MP4
> MPC*
> MPEG
> MPG
> MRW
> MSL*
> MSVG
> MTV*
> MVG*
> NEF
> NRW
> NULL*
> ORF
> OTB*
> OTF*
> PAL*
> PALM*
> PAM*
> PANGO*
> PATTERN*
> PBM*
> PCD*
> PCDS*
> PCL
> PCT*
> PCX*
> PDB*
> PDF
> PDFA
> PEF
> PES*
> PFA*
> PFB*
> PFM*
> PGM*
> PICON*
> PICT*
> PIX*
> PJPEG*
> PLASMA*
> PNG*
> PNG00*
> PNG24*
> PNG32*
> PNG48*
> PNG64*
> PNG8*
> PNM*
> PPM*
> PREVIEW*
> PS
> PS2*
> PS3*
> PSB*
> PSD*
> PTIF*
> PWP*
> RAF
> RAS*
> RAW
> RGB*
> RGBA*
> RGBO*
> RGF*
> RLA*
> RLE*
> RMF
> RW2
> SCR*
> SCT*
> SFW*
> SGI*
> SHTML*
> SIX*
> SIXEL*
> SR2
> SRF
> STEGANO*
> SUN*
> SVG
> SVGZ
> TEXT*
> TGA*
> THUMBNAIL*
> TIFF*
> TIFF64*
> TILE*
> TIM*
> TTC*
> TTF*
> TXT*
> UBRL*
> UBRL6*
> UIL*
> UYVY*
> VDA*
> VICAR*
> VID*
> VIFF*
> VIPS*
> VST*
> WBMP*
> WMV
> WPG*
> X3F
> XBM*
> XC*
> XCF*
> XPM*
> XPS
> XV*
> YCbCr*
> YCbCrA*
> YUV*

Topic: FFMPEG

We allow for these audio & video file extensions.

Audio extensions are,

- .aac
- .aiff
- .m4a
- .mp3
- .ogg
- .ra
- .wav
- .wma

Video extensions are,

- .avi
- .flv
- .mov
- .mp4
- .mpeg
- .ogg
- .rm
- .webm
- .wmv

However, FFMPEG supports all the following file extensions. You can view a full list with the following command.

> ./ffmpeg -formats

> 3g2
> 3gp
> 4xm
> a64
> aa
> aac
> ac3
> acm
> act
> adf
> adp
> ads
> adts
> adx
> aea
> afc
> aiff
> aix
> alaw
> alias
> amr
> anm
> apc
> ape
> apng
> aqtitle
> asf
> asf
> asf
> ass
> ast
> au
> avi
> avm2
> avr
> avs
> bethsoftvid
> bfi
> bfstm
> bin
> bink
> bit
> bmp
> bmv
> boa
> brender
> brstm
> c93
> caf
> cavsvideo
> cdg
> cdxl
> cine
> concat
> crc
> dash
> data
> daud
> dcstr
> dds
> dfa
> dirac
> dnxhd
> dpx
> dsf
> dsicin
> dss
> dts
> dtshd
> dv
> dvbsub
> dvbtxt
> dvd
> dxa
> ea
> ea
> eac3
> epaf
> exr
> f32be
> f32le
> f4v
> f64be
> f64le
> ffm
> ffmetadata
> film
> filmstrip
> flac
> flic
> flv
> framecrc
> framehash
> framemd5
> frm
> fsb
> g722
> g723
> g729
> genh
> gif
> gsm
> gxf
> h261
> h263
> h264
> hash
> hds
> hevc
> hls
> hls
> applehttp
> hnm
> ico
> idcin
> idf
> iff
> ilbc
> image2
> image2pipe
> ingenient
> ipmovie
> ipod
> ircam
> ismv
> iss
> iv8
> ivf
> ivr
> j2k
> jacosub
> jpeg
> jpegls
> jv
> latm
> lavfi
> live
> lmlm4
> loas
> lrc
> lvf
> lxf
> m4v
> matroska
> webm
> md5
> mgsts
> microdvd
> mjpeg
> mkvtimestamp
> mlp
> mlv
> mm
> mmf
> mov
> mp4
> m4a
> 3gp
> 3g2
> mj2
> mp2
> mp3
> mp4
> mpc
> mpc8
> mpeg
> mpeg1video
> mpeg2video
> mpegts
> mpegtsraw
> mpegvideo
> mpjpeg
> mpl2
> mpsub
> msf
> msnwctcp
> mtaf
> mtv
> mulaw
> musx
> mv
> mvi
> mxf
> mxf
> mxf
> mxg
> nc
> nistsphere
> nsv
> null
> nut
> nuv
> oga
> ogg
> oma
> opus
> paf
> pam
> pbm
> pcx
> pgm
> pgmyuv
> pictor
> pjs
> pmp
> png
> ppm
> psp
> psxstr
> pva
> pvf
> qcp
> qdraw
> r3d
> rawvideo
> realtext
> redspark
> rl2
> rm
> roq
> rpl
> rsd
> rso
> rtp
> rtp
> rtsp
> s16be
> s16le
> s24be
> s24le
> s32be
> s32le
> s8
> sami
> sap
> sbg
> sdp
> sdr2
> segment
> sgi
> shn
> siff
> singlejpeg
> sln
> smjpeg
> smk
> smoothstreaming
> smush
> sol
> sox
> spdif
> spx
> srt
> stl
> stream
> ssegment
> subviewer
> subviewer1
> sunrast
> sup
> svag
> svcd
> swf
> tak
> tedcaptions
> tee
> thp
> tiertexseq
> tiff
> tmv
> truehd
> tta
> tty
> txd
> u16be
> u16le
> u24be
> u24le
> u32be
> u32le
> u8
> uncodedframecrc
> v210
> v210x
> vag
> vc1
> vc1test
> vcd
> vivo
> vmd
> vob
> vobsub
> voc
> vpk
> vplayer
> vqf
> w64
> wav
> wc3movie
> webm
> webm
> webm
> webp
> webp
> webvtt
> wsaud
> wsd
> wsvqa
> wtv
> wv
> wve
> xa
> xbin
> xmv
> xvag
> xwma
> yop
> yuv4mpegpipe
